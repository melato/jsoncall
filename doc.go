/* Package jsoncall facilitates creating HTTP web services from an interface,
using JSON to marshal/unmarshal inputs and outputs

It is meant to be used to create web services, and provides HTTP Client and HTTP Server classes.

The client and the server implement and call methods of a user-specified api interface type.
The server operates entirely via reflection, using reflect.Value.Call() to call api methods.
The client requires a stub implementation of the api interface, which can be generated by the jsoncall/generate package.

Given a specified api interface type, the client:

	- Puts each input parameter in a map, with keys "P1", "P2", ...
	- marshals this map int JSON
	- constructs a request url by appending the name of the api method to a base URL
	- makes an HTTP POST request with the input JSON as the request body
	- Gets the HTTP response status and response body

- If the HTTP status is success (2xx):

  - It unmarshals the response body into a struct that contains an appropriately typed and named field for each non-error output
  - It sets each error output to nil
  - It returns these outputs

- If the HTTP status is not success (2xx):

  - It unmarshals the response body into an (*jsoncall.Error
  - It returns this *Error for the method's error outputs, if any
  - It returns zero values for the method's remaining outputs

The Server:


Both Client and Server have hooks for things like providing/checking authentication via HTTP headers
*/
package jsoncall
